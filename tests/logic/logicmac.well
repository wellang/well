; logic.well
~constants {
	~string:hello = "- - - Bitwise/Arithmetic logic test - - -\n"
	~int:a = 1
	~int:b = 1

	; LOGIC INSTRUCTIONS
	; a = 001 -> 110 = -2
	~string:ntest =   "NOT::  Should be: -2.  Is: %d\n"
	; a == b
	~string:atest =   "AND::  Should be:  1.  Is: %d\n"
	; a | b
	~string:otest =   "OR::   Should be:  1.  Is: %d\n"

	; ~(a|b)
	~string:notest =  "NOR::  Should be: -2.  Is: %d\n"
	; ~(a==b)
	~string:natest =  "NAND:: Should be: -2.  Is: %d\n"
	; a^b
	~string:xtest =   "XOR::  Should be:  0.  Is: %d\n"

	; MATH INSTRUCTIONS
	; a+b
	~string:adtest =  "ADD::  Should be:  2.  Is: %d\n"
	; a-b
	~string:sutest =  "SUB::  Should be:  0.  Is: %d\n"
	; a*b
	~string:mutest =  "MUL::  Should be:  1.  Is: %d\n"
	; a/b
	~string:ditest =  "DIV::  Should be:  1.  Is: %d\n"
	; a%b
	~string:motest =  "MOD::  Should be:  0.  Is: %d\n"
}

~void:logic {
	; LOGIC INSTRUCTIONS

	; not
	move~ a, r1
	not~ r2, r1
	move~ ntest, r1
	call~ printf
	
}

~void:math {
	; MATH INSTRUCTIONS
	
}

~int:main {
	move~ hello, r1
	call~ printf

	call~ logic
	call~ math

	return~ 0
}
